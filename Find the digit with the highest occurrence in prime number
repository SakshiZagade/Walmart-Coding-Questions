class Solution {
  public:
     bool isPrime(int n) {
        if (n < 2) return false;
        for (int i = 2; i * i <= n; i++) {
            if (n % i == 0)
                return false;
        }
        return true;
    }

    int maxDigit(int L, int R) {
        vector<int> freq(10, 0); // Frequency array for digits 0-9
        bool foundPrime = false;

        // Find primes in the range L to R
        for (int num = L; num <= R; num++) {
            if (isPrime(num)) {
                foundPrime = true;
                int temp = num;
                
                // Count digits in prime number
                while (temp > 0) {
                    freq[temp % 10]++;
                    temp /= 10;
                }
            }
        }

        if (!foundPrime) return -1; // No prime numbers found

        // Find the digit with the highest occurrence
        int maxFreq = 0, result = 0;
        for (int i = 0; i < 10; i++) {
            if (freq[i] >= maxFreq) {
                maxFreq = freq[i];
                result = i; // Store the largest digit in case of tie
            }
        }
        return result;
    }
};
